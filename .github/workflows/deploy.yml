name: Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to AWS EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          INSTANCE_ID: i-0df3ff5363c6514f5
        run: |
          # Install AWS CLI
          pip install awscli
          
          echo "üöÄ Starting deployment to AWS EC2..."
          
          # Send deployment command via SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"üöÄ GitHub deployment triggered at $(date)\"",
              "cd /home/ubuntu/ChainViz",
              "sudo chown -R ubuntu:ubuntu /home/ubuntu/ChainViz",
              "git config --global --add safe.directory /home/ubuntu/ChainViz",
              "git fetch origin",
              "git reset --hard origin/main",
              "echo",
              "echo \"üì¶ Rebuilding containers...\"",
              "sudo docker-compose down",
              "sudo docker-compose build --no-cache",
              "sudo docker-compose up -d",
              "sleep 20",
              "echo",
              "echo \"‚úÖ Deployment complete!\"",
              "sudo docker-compose ps",
              "echo",
              "echo \"üß™ Testing endpoints...\"",
              "curl -s http://localhost/health || echo \"Frontend starting...\"",
              "curl -s http://localhost:8000/docs > /dev/null && echo \"‚úÖ Backend API is responding\" || echo \"‚ö†Ô∏è  Backend API check failed\""
            ]' \
            --timeout-seconds 900 \
            --region $AWS_REGION \
            --query 'Command.CommandId' \
            --output text)
          
          echo "üìã Deployment command sent: $COMMAND_ID"
          echo "‚è≥ Waiting for deployment to complete (this takes 5-6 minutes)..."
          
          # Wait for command to complete
          for i in {1..40}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --region $AWS_REGION \
              --query 'Status' \
              --output text 2>/dev/null || echo "Pending")
            
            echo "Status check $i/40: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "‚úÖ Deployment completed successfully!"
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --region $AWS_REGION \
                --query 'StandardOutputContent' \
                --output text | tail -20
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "‚ùå Deployment failed with status: $STATUS"
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --region $AWS_REGION \
                --query '[StandardOutputContent,StandardErrorContent]' \
                --output text
              exit 1
            fi
            
            sleep 15
          done
          
          echo "‚è∞ Deployment still in progress. Check manually:"
          echo "   aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id $INSTANCE_ID --region $AWS_REGION"
